<?php

/**
 * WrkMouvementTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class WrkMouvementTable extends Doctrine_Table {

    /**
     * Returns an instance of this class.
     *
     * @return object WrkMouvementTable
     */
    public static function getInstance() {
        return Doctrine_Core::getTable('WrkMouvement');
    }

    public function countWrkMouvementFiltrer($heureDebut = '', $heureFin = '', $type = '', $emplacement = '', $reference = '', $value = null) {
        $req = new Doctrine_RawSql(Doctrine_Manager::getInstance()->connection());
        $req->select('{m.*}, {e.*}, {p.*}') //Check that it's between curly braces...
                ->from('wrk_mouvement m')
                ->leftJoin('ref_emplacement e ON m.code_emplacement=e.code_emplacement')
                ->leftJoin('sf_guard_user u ON m.id_utilisateur=u.id')
                  ->leftJoin('wrk_arrivage_produit p ON m.ref_produit = p.br_sap')
                            ->leftJoin('wrk_arrivage a ON p.id_arrivage = a.id_arrivage')
                ->leftJoin('ref_interlocuteur i ON i.id = a.id_contact_PFF')
                ->addComponent('m', 'WrkMouvement m') //Dont forget to associate tables with Doctrine classes...
                ->addComponent('e', 'm.RefEmplacement e')
         ->addComponent('p', 'm.WrkArrivageProduit p')
                ->addComponent('a', 'p.WrkArrivage a')
                ->addComponent('i', 'a.RefInterlocuteur i');
        if ($heureDebut != '') {
            $req->andWhere('m.heure_prise >=?', $heureDebut);
        }
        if ($heureFin != '') {
            $req->andWhere('m.heure_prise <=?', $heureFin);
        }

        if ($type != '') {
            if ($type === 'prise non déposée') {
                $req->andWhere('m.type = ?', "prise");
                $req->addWhere('m.heure_prise >= ALL(SELECT m2.heure_prise FROM wrk_mouvement m2 WHERE m2.ref_produit=m.ref_produit)');
            } else {
                $req->andWhere('m.type =?', $type);
            }
        }
        $req->andWhere('m.type <> ?', "passage");
        if ($emplacement != '') {
            $req->andWhere('m.code_emplacement = ?', $emplacement);
        }
        if ($reference != '') {
            $req->andWhere('m.ref_produit LIKE ?', '%'.$reference.'%');
        }
       
       $req= $this->addQueryRecherche($req, $value);

        return $req->count();
    }

    private function addQueryRecherche($req, $value) {
        if ($value) {
            $req->andWhere("(m.ref_produit LIKE '%$value%' OR a.commande_achat LIKE '%$value%' OR i.nom LIKE '%$value%' OR p.ref_produit LIKE '%$value%' OR m.type LIKE '%$value%' OR e.libelle LIKE '%$value%' OR m.commentaire LIKE '%$value%' OR m.groupe LIKE '%$value%' OR  m.heure_prise LIKE '%$value%' OR  u.username LIKE '%$value%')");
        }

        return $req;
    }

    public function getWrkMouvementFiltrer($heureDebut = '', $heureFin = '', $type = '', $emplacement = '', $reference = '', $start = null, $length = null, $value = null, $orderCol = null, $orderDir = null) {
        //requete de filtre des mvts
        $req = new Doctrine_RawSql(Doctrine_Manager::getInstance()->connection());
        $req->select('{m.*}, {e.*}, {p.*} , {a.*} ') 
                ->from('wrk_mouvement m')
                ->leftJoin('ref_emplacement e ON m.code_emplacement=e.code_emplacement')
                ->leftJoin('sf_guard_user u ON m.id_utilisateur=u.id')
                ->leftJoin('wrk_arrivage_produit p ON m.ref_produit = p.br_sap')
                ->leftJoin('wrk_arrivage a ON p.id_arrivage = a.id_arrivage')
                ->leftJoin('ref_interlocuteur i ON i.id = a.id_contact_PFF')
                ->addComponent('m', 'WrkMouvement m') 
                ->addComponent('e', 'm.RefEmplacement e')
                ->addComponent('p', 'm.WrkArrivageProduit p')
                ->addComponent('a', 'p.WrkArrivage a')
                ->addComponent('i', 'a.RefInterlocuteur i');
        if ($heureDebut != '') {
            $req->andWhere('m.heure_prise >=?', $heureDebut);
        }
        if ($heureFin != '') {
            $req->andWhere('m.heure_prise <=?', $heureFin);
        }

        if ($type != '') {
            if ($type === 'prise non déposée') {
                $req->andWhere('m.type = ?', "prise");
                $req->addWhere('m.heure_prise >= ALL(SELECT m2.heure_prise FROM wrk_mouvement m2 WHERE m2.ref_produit=m.ref_produit)');
            } else {
                $req->andWhere('m.type =?', $type);
            }
        }
        $req->andWhere('m.type <> ?', "passage");
        if ($emplacement != '') {
            $req->andWhere('m.code_emplacement = ?', $emplacement);
        }
        if ($reference != '') {
            $req->andWhere('m.ref_produit LIKE ?', '%'.$reference.'%');
        }
        if ($length) {
            $req->limit($length);
        }
        if ($start) {
            $req->offset($start);
        }

        if ($orderDir) {
            $col = "m.heure_prise";
            switch ($orderCol) {
                case 0 : $col = "m.ref_produit";
                    break;
                case 1 : $col = "m.type";
                    break;
                case 2 : $col = "e.libelle";
                    break;
                case 3 : $col = "m.quantite";
                    break;
		case 4 : $col = "m.commentaire";
                    break;
                case 5 : $col = "m.groupe";
                    break;
                case 6 : $col = "m.heure_prise";
                    break;
                case 7 : $col = "u.username";
                    break;
            }
            $req->orderBy($col . " " . $orderDir);
        } else {
            $req->orderBy("m.heure_prise DESC");
        }

        $req= $this->addQueryRecherche($req, $value);

        //requete recuperant uniquement les mvt de prise non déposé
        $priseEnCours = NULL;

        if ($type == '' || $type === 'prise' || $type === 'prise non déposée') {

            $requete = "SELECT m.id_mouvement FROM wrk_mouvement m
    					LEFT JOIN ref_emplacement e ON m.code_emplacement=e.code_emplacement
    					WHERE m.type = 'prise'
    					AND m.heure_prise >= ALL(SELECT m2.heure_prise FROM wrk_mouvement m2 WHERE m2.ref_produit=m.ref_produit) ";

            if ($heureDebut != '') {
                $requete .= "AND m.heure_prise >= '$heureDebut' ";
            }
            if ($heureFin != '') {
                $requete .= "AND m.heure_prise <= '$heureFin' ";
            }
            if ($emplacement != '') {
                $requete .= "AND m.code_emplacement = '$emplacement' ";
            }
            if ($reference != '') {
                $requete .= "AND m.ref_produit = '$reference' ";
            }

            $requete .= "ORDER BY m.heure_prise desc";

            $con = Doctrine_Manager::getInstance()->connection();
            $st = $con->execute($requete);
            $priseEnCours = $st->fetchAll(PDO::FETCH_ASSOC);
        }

        return array($req->execute(), $priseEnCours);
    }

    /**
     * Retourne les produit en retard sans prise en compte des horaires et des jours feries
     */
    public function getProduitEnRetard($limitSecondsRetard = 0) {
        $d = new DateTime();
        $d->modify('-4 days'); //on limite a 4 jours les retards
        $dateLimit = $d->format('Y-m-d H:i:s');
        $q = Doctrine_Manager::getInstance()->getCurrentConnection();

        //recuperer tout les produits en retard en s'assurant que la ref produit soit 
        //unique (cas ou une reception a plusieurs arrivage), 
        //si la ref produit n'est pas unique, on recupere le produit le plus en retard
        $result = $q->execute("SELECT m.id_mouvement,m.ref_produit,m.heure_prise,MAX(m.secondes) as secondes FROM v_mouvement_retard m WHERE m.type = 'depose' AND m.code_emplacement='" . RefEmplacement::CODE_EMPLACEMENT_RECEPTION . "' AND m.heure_prise >= ALL(SELECT m2.heure_prise FROM wrk_mouvement m2 WHERE m2.ref_produit=m.ref_produit AND type='depose' AND code_emplacement<>'" . RefEmplacement::CODE_EMPLACEMENT_RECEPTION . "') AND m.secondes>" . $limitSecondsRetard . " AND m.heure_prise>'$dateLimit' GROUP BY m.id_mouvement , m.ref_produit , m.heure_prise");

        $produitRetardArray = $result->fetchAll();
        return $produitRetardArray;
    }

    /**
     * Retourne les produit en retard avec prise en compte des horaires et des jours feries
     * @param type $limitSecondsRetard permet de recuperer des produits qui seront en retard dans $limitSecondsRetard
     */
    public function getProduitEnRetardAvecHoraire($limitSecondsRetard = 0) {
        $produitRetardArray = $this->getProduitEnRetard($limitSecondsRetard);
        return $this->generateArrayRetardAvecHoraire($produitRetardArray, $limitSecondsRetard);
    }

    private function generateArrayRetardAvecHoraire($produitRetardArray, $limitSecondsRetard = 0) {
        $horaires = RefHoraireTable::getInstance()->getHorairesArray();
        $feries = RefFerieTable::getInstance()->getFeriesArrayUnique();
        $nbHeureParJour = RefHoraireTable::getInstance()->getNbSecondeNonTravailleParJours($horaires);
        $produitRetardHoraireArray = array();
        foreach ($produitRetardArray as $produitRetard) {
            $secondeNonTravailler = RefHoraireTable::getInstance()->getNbSecondeNonTravaille($produitRetard['heure_prise'], date('Y-m-d H:i:s'), $horaires, $feries, $nbHeureParJour, $produitRetard['secondes'] - $limitSecondsRetard);
            $retard = $produitRetard['secondes'] - $secondeNonTravailler;
            if ($retard > $limitSecondsRetard) {
                $produitRetard['secondes'] = $retard;
                if ($retard < 0) {
                    $produitRetard['time'] = '-' . $this->secondsToTime(-$retard);
                } else {
                    $produitRetard['time'] = $this->secondsToTime($retard);
                }
                $produitRetardHoraireArray[] = $produitRetard;
            }
        }

      

        usort($produitRetardHoraireArray,   function ($a, $b) {
            if ($a['secondes'] == $b['secondes']) {
                return 0;
            }
            return ($a['secondes'] < $b['secondes']) ? 1 : -1;
        });
        return $produitRetardHoraireArray;
    }
    
        private function generateArrayRetardAvecHorairePourArrivage($produitRetardArray, $limitSecondsRetard = 0) {
        $horaires = RefHoraireTable::getInstance()->getHorairesArray();
        $feries = RefFerieTable::getInstance()->getFeriesArrayUnique();
        $nbHeureParJour = RefHoraireTable::getInstance()->getNbSecondeNonTravailleParJours($horaires);
        $produitRetardHoraireArray = array();
        foreach ($produitRetardArray as $produitRetard) {
            $secondeNonTravailler = RefHoraireTable::getInstance()->getNbSecondeNonTravaille($produitRetard['dtearrivage'], date('Y-m-d H:i:s'), $horaires, $feries, $nbHeureParJour, $produitRetard['secondes'] - $limitSecondsRetard);
            $retard = $produitRetard['secondes'] - $secondeNonTravailler;
            if ($retard > $limitSecondsRetard) {
                $produitRetard['secondes'] = $retard;
                if ($retard < 0) {
                    $produitRetard['time'] = '-' . $this->secondsToTime(-$retard);
                } else {
                    $produitRetard['time'] = $this->secondsToTime($retard);
                }
                $produitRetardHoraireArray[] = $produitRetard;
            }
        }

      

        usort($produitRetardHoraireArray,   function ($a, $b) {
            if ($a['secondes'] == $b['secondes']) {
                return 0;
            }
            return ($a['secondes'] < $b['secondes']) ? 1 : -1;
        });
        return $produitRetardHoraireArray;
    }

    /**
     * Convertie un nb secondes en Heure:Minute:Seconde
     * @param type $seconds
     * @return type
     */
    private function secondsToTime($seconds) {
        $hours = floor($seconds / 3600);
        $mins = floor(($seconds - ($hours * 3600)) / 60);
        $secs = floor($seconds % 60);

        if ($hours < 10)
            $hours = '0' . $hours;
        if ($mins < 10)
            $mins = '0' . $mins;
        if ($secs < 10)
            $secs = '0' . $secs;
        return $hours . ':' . $mins . ':' . $secs;
    }

    /**
     * Convertie une  Heure:Minute:Seconde en nb secondes
     * @param type $seconds
     * @return type
     */
    public static function timeToSeconds($str_time) {
        $str_time = preg_replace("/^([\d]{1,2})\:([\d]{2})$/", "00:$1:$2", $str_time);

        $hours = 0;
        $minutes = 0;
        $seconds = 0;
        sscanf($str_time, "%d:%d:%d", $hours, $minutes, $seconds);

        $time_seconds = $hours * 3600 + $minutes * 60 + $seconds;
        return $time_seconds;
    }

    //A optimiser avec un count() dans la requete
    public function getDelaisNomadeSupervisionParMois($dateDebut, $dateFin) {
        $q = $this->createQuery()
                ->select('m.created_at,m.heure_prise')
                ->from('WrkMouvement m')
                ->where('m.type="prise" OR m.type="depose"')
                ->andWhere('m.heure_prise >=?', $dateDebut)
                ->andWhere('m.heure_prise <=?', $dateFin)
                ->andWhere('m.created_at >=?', $dateDebut)
                ->andWhere('m.created_at <=?', $dateFin);
        $mouvements = $q->execute();
        $res = $this->getArrayStatsMonth($dateDebut, $dateFin);
        foreach ($mouvements as $mouvement) {
            $month = date("m", strtotime($mouvement->getHeurePrise()));
            if (!isset($res[$month]) || !isset($res[$month]['value']) || !isset($res[$month]['nbValue'])) {
                $res[$month]['value'] = 0;
                $res[$month]['nbValue'] = 0;
            }
            $timeFirst = strtotime($mouvement->getHeurePrise());
            $timeSecond = strtotime($mouvement->getCreatedAt());
            $differenceInSeconds = $timeSecond - $timeFirst;
            $res[$month]['value']+=$differenceInSeconds;
            $res[$month]['nbValue'] = $res[$month]['nbValue'] + 1;
        }
        foreach ($res as $month => $values) {
            if (!isset($values['value']) || !isset($values['nbValue']) || $values['nbValue'] == 0) {
                $res[$month]['value'] = 0;
                $res[$month]['nbValue'] = 0;
                $res[$month]['moyenne'] = 0;
            } else {
                $res[$month]['moyenne'] = $values['value'] / $values['nbValue'];
            }
        }
        return $res;
    }

    public function getNbColisArrivageParMois($dateDebut, $dateFin) {
        $q = $this->createQuery()
                ->select('MONTH(a.created_at) as mois,count(DISTINCT a.ref_produit) as quantite')
                ->from('WrkArrivageProduit a')
                ->andWhere('a.created_at >=?', $dateDebut)
                ->andWhere('a.created_at <=?', $dateFin)
                ->andWhere('a.br_sap IS NULL')
                ->orderBy('a.created_at ASC')
                ->groupBy('MONTH(a.created_at)');
        return $this->getNbColisParMois($dateDebut, $dateFin, $q);
    }
    
     public function getNbColisArrivageParJours($dateDebut, $dateFin) {
        $q = $this->createQuery()
                ->select('DAY(a.created_at) as jour,count(DISTINCT a.ref_produit) as quantite')
                ->from('WrkArrivageProduit a')
                ->andWhere('a.created_at >=?', $dateDebut)
                ->andWhere('a.created_at <=?', $dateFin)
                ->andWhere('a.br_sap IS NULL')
                ->orderBy('a.created_at ASC')
                ->groupBy('DAY(a.created_at)');
        return $this->getNbColisParJours($dateDebut, $dateFin, $q);
    }

    //Retourne le nb arrivage receptionner par mois
    //recuperer tous les arrivages du mois et verifie si il y a une reception
    //pour chaque ref_produit
    public function getNbColisArrivageReceptionneParMois($dateDebut, $dateFin) {
        $db = Doctrine_Manager::getInstance()->connection();
        $query = $db->prepare("SELECT MONTH(a.created_at) as mois,count(DISTINCT a.ref_produit) as quantite"
                . " FROM wrk_arrivage_produit a"
                . " WHERE a.created_at >='$dateDebut'"
                . " AND a.created_at <='$dateFin'"
                . " AND a.br_sap IS NULL"
                . " AND a.ref_produit IN (SELECT t.ref_produit FROM wrk_arrivage_produit t WHERE t.br_sap IS NOT NULL)"
                . " GROUP BY MONTH(a.created_at)"
                . " ORDER BY a.created_at ASC");
        $st = $db->execute($query->getQuery());

        $mouvements = $st->fetchAll();
        $res = $this->getArrayStatsMonthGlissant($dateDebut);
        foreach ($mouvements as $mouvement) {
            $month = $mouvement['mois'];
            if (!isset($res[$month]) || !isset($res[$month]['nbColis'])) {
                $res[$month]['nbColis'] = 0;
            }
            $res[$month]['nbColis'] = $res[$month]['nbColis'] + $mouvement['quantite'];
        }
        foreach ($res as $month => $values) {
            if (!isset($values['nbColis'])) {
                $res[$month]['nbColis'] = 0;
            }
        }
        return $res;
    }
    
    public function getNbColisArrivageReceptionneParJours($dateDebut, $dateFin) {
        $db = Doctrine_Manager::getInstance()->connection();
        $query = $db->prepare("SELECT DAY(a.created_at) as jours,count(DISTINCT a.ref_produit) as quantite"
                . " FROM wrk_arrivage_produit a"
                . " WHERE a.created_at >='$dateDebut'"
                . " AND a.created_at <='$dateFin'"
                . " AND a.br_sap IS NULL"
                . " AND a.ref_produit IN (SELECT t.ref_produit FROM wrk_arrivage_produit t WHERE t.br_sap IS NOT NULL AND t.created_at>='$dateDebut')"
                . " GROUP BY DAY(a.created_at)"
                . " ORDER BY a.created_at ASC");
        $st = $db->execute($query->getQuery());

        $mouvements = $st->fetchAll();
        $res = $this->getArrayStatsJoursGlissant($dateDebut);
        foreach ($mouvements as $mouvement) {
            $month = $mouvement['jours'];
            if (!isset($res[$month]) || !isset($res[$month]['nbColis'])) {
                $res[$month]['nbColis'] = 0;
            }
            $res[$month]['nbColis'] = $res[$month]['nbColis'] + $mouvement['quantite'];
        }
        foreach ($res as $month => $values) {
            if (!isset($values['nbColis'])) {
                $res[$month]['nbColis'] = 0;
            }
        }
      
        return $res;
    }
    
    

    //Retourne le nb arrivage receptionner par mois
    //Recupere tous les arrivages receptionner d'un mois
    //dans le cas ou un arrivage a eu lieu un mois N et que la reception a lieu le mois
    //N+1, la reception comptera pour le mois N+1
    public function getNbColisArrivageReceptionneParMoisV1($dateDebut, $dateFin) {
        $q = $this->createQuery()
                ->select('MONTH(a.created_at) as mois,count(DISTINCT a.ref_produit) as quantite')
                ->from('WrkArrivageProduit a')
                ->andWhere('a.created_at >=?', $dateDebut)
                ->andWhere('a.created_at <=?', $dateFin)
                ->andWhere('a.br_sap IS NOT NULL')
                ->orderBy('a.created_at ASC')
                ->groupBy('MONTH(a.created_at)');
        return $this->getNbColisParMois($dateDebut, $dateFin, $q);
    }

    public function getNbColisReceptionParMois($dateDebut, $dateFin) {
        $q = $this->createQuery()
                ->select('MONTH(a.created_at) as mois,count(DISTINCT a.br_sap) as quantite')
                ->from('WrkArrivageProduit a')
                ->andWhere('a.created_at >=?', $dateDebut)
                ->andWhere('a.created_at <=?', $dateFin)
                ->andWhere('a.br_sap IS NOT NULL')
                ->orderBy('a.created_at ASC')
                ->groupBy('MONTH(a.created_at)');
        return $this->getNbColisParMois($dateDebut, $dateFin, $q);
    }
    
    public function getNbColisReceptionParJours($dateDebut, $dateFin) {
        $q = $this->createQuery()
                ->select('DAY(a.created_at) as jour,count(DISTINCT a.br_sap) as quantite')
                ->from('WrkArrivageProduit a')
                ->andWhere('a.created_at >=?', $dateDebut)
                ->andWhere('a.created_at <=?', $dateFin)
                ->andWhere('a.br_sap IS NOT NULL')
                ->orderBy('a.created_at ASC')
                ->groupBy('DAY(a.created_at)');
        return $this->getNbColisParJours($dateDebut, $dateFin, $q);
    }

    public function getNbColisParMois($dateDebut, $dateFin, $query) {
        $mouvements = $query->execute();
        $res = $this->getArrayStatsMonthGlissant($dateDebut);
        foreach ($mouvements as $mouvement) {
            $month = $mouvement->getMois();
            if (!isset($res[$month]) || !isset($res[$month]['nbColis'])) {
                $res[$month]['nbColis'] = 0;
            }
            $res[$month]['nbColis'] = $res[$month]['nbColis'] + $mouvement->getQuantite();
        }
        foreach ($res as $month => $values) {
            if (!isset($values['nbColis'])) {
                $res[$month]['nbColis'] = 0;
            }
        }
        return $res;
    }
    
       public function getNbColisParJours($dateDebut, $dateFin, $query) {
        $mouvements = $query->execute();
        $res = $this->getArrayStatsJoursGlissant($dateDebut);
        foreach ($mouvements as $mouvement) {
            $day = $mouvement->getJour();
            if (!isset($res[$day]) || !isset($res[$day]['nbColis'])) {
                $res[$day]['nbColis'] = 0;
            }
            $res[$day]['nbColis'] = $res[$day]['nbColis'] + $mouvement->getQuantite();
        }
        foreach ($res as $day => $values) {
            if (!isset($values['nbColis'])) {
                $res[$day]['nbColis'] = 0;
            }
        }
        return $res;
    }


    public function getNbArrivage($dateDebut, $dateFin) {
        $q = $this->createQuery()
                ->select('count(DISTINCT a.ref_produit) as quantite')
                ->from('WrkArrivageProduit a')
                ->andWhere('a.created_at >=?', $dateDebut)
                ->andWhere('a.created_at <=?', $dateFin)
                ->andWhere('a.br_sap IS NULL');
        $res = $q->fetchOne();
        if ($res) {
            if (isset($res['quantite'])) {
                return $res['quantite'];
            }
        }
        return 0;
    }
    public function getArrivage($dateDebut, $dateFin) {
        $q = $this->createQuery()
                ->select('DISTINCT a.ref_produit , a.*')
                ->from('WrkArrivageProduit a')
                ->andWhere('a.created_at >=?', $dateDebut)
                ->andWhere('a.created_at <=?', $dateFin)
                ->andWhere('a.br_sap IS NULL');
        $res = $q->fetchArray();
      
        return $res;
    }
    public function getNbArrivageEnAttente($dateDebut, $dateFin) {
        $db = Doctrine_Manager::getInstance()->connection();
        $query = $db->prepare("SELECT count(DISTINCT a.ref_produit) as quantite"
                . " FROM wrk_arrivage_produit a"
                . " WHERE a.created_at >='$dateDebut'"
                . " AND a.created_at <='$dateFin'"
                . " AND a.br_sap IS NULL"
                . " AND a.ref_produit NOT IN (SELECT t.ref_produit FROM wrk_arrivage_produit t WHERE t.br_sap IS NOT NULL)");
        $st = $db->execute($query->getQuery());

        $res = $st->fetchAll();

        if (count($res) > 0) {
            if (isset($res[0]['quantite'])) {
                return $res[0]['quantite'];
            }
        }
        return 0;
    }
    
        public function getArrivageEnAttente($dateDebut, $dateFin) {
        $db = Doctrine_Manager::getInstance()->connection();
        $query = $db->prepare("SELECT DISTINCT a.ref_produit, a.*"
                . " FROM wrk_arrivage_produit a"
                . " WHERE a.created_at >='$dateDebut'"
                . " AND a.created_at <='$dateFin'"
                . " AND a.br_sap IS NULL"
                . " AND a.ref_produit NOT IN (SELECT t.ref_produit FROM wrk_arrivage_produit t WHERE t.br_sap IS NOT NULL)");
        $st = $db->execute($query->getQuery());

        $res = $st->fetchAll();

        return $res;
    }
    

    
         public function getReceptionDeuxiemeDeposeRetard($dateDebut, $dateFin) {
        $db = Doctrine_Manager::getInstance()->connection();
        $query = $db->prepare("SELECT DISTINCT a.ref_produit, a.created_at as heure_prise,timestampdiff(SECOND,a.created_at,now()) AS `secondes`"
                . " FROM wrk_arrivage_produit a"
                . " WHERE a.created_at >='$dateDebut'"
                . " AND a.created_at <='$dateFin'"
                . " AND a.br_sap IS NULL"
                . " AND a.ref_produit NOT IN (SELECT t.ref_produit FROM wrk_arrivage_produit t WHERE t.br_sap IS NOT NULL)");
        $st = $db->execute($query->getQuery());

        $res = $st->fetchAll();
        $res= $this->generateArrayRetardAvecHoraire($res,-900);
        
        $resffin=array();
        
        foreach ($res as $value) {
            if($value["secondes"]>10800){
                $resffin[]=$value;
            }
        }
        return $resffin;
        
    }

    public function getNbReceptionNonAchemine($dateDebut, $dateFin) {
        $db = Doctrine_Manager::getInstance()->connection();

        //Recupere le nombre d'arrivage receptionner non achemine
        /* $query = $db->prepare("SELECT count(DISTINCT a.ref_produit) as quantite"
          . " FROM wrk_arrivage_produit a"
          . " WHERE a.created_at >='$dateDebut'"
          . " AND a.created_at <='$dateFin'"
          . " AND a.br_sap IS NULL"
          . " AND a.ref_produit IN ("
          . " SELECT ref_produit FROM wrk_arrivage_produit"
          . " WHERE br_sap IN(select ref_produit "
          . " FROM wrk_mouvement m "
          . " WHERE m.type = 'depose' "
          . " AND m.code_emplacement='" . RefEmplacement::CODE_EMPLACEMENT_RECEPTION . "' "
          . " AND m.heure_prise >= ALL( "
          . " SELECT m2.heure_prise "
          . " FROM wrk_mouvement m2 "
          . " WHERE m2.ref_produit=m.ref_produit "
          . " AND type='depose' "
          . " AND code_emplacement<>'" . RefEmplacement::CODE_EMPLACEMENT_RECEPTION . "')))"); */

        //Recupere le nombre de reception non achemine
        $query = $db->prepare("SELECT count(DISTINCT reception.ref_produit) as quantite"
                . " FROM wrk_mouvement reception"
                . " LEFT JOIN wrk_mouvement depose ON depose.ref_produit=reception.ref_produit AND depose.type='depose' AND depose.code_emplacement<>'" . RefEmplacement::CODE_EMPLACEMENT_RECEPTION . "' AND depose.heure_prise>=reception.heure_prise "
                . " WHERE reception.heure_prise >='$dateDebut'"
                . " AND reception.heure_prise <='$dateFin'"
                . " AND reception.type = 'depose'"
                . " AND reception.code_emplacement='" . RefEmplacement::CODE_EMPLACEMENT_RECEPTION . "'"
                . " AND depose.ref_produit IS NULL");
        $st = $db->execute($query->getQuery());

        $res = $st->fetchAll();

        if (count($res) > 0) {
            if (isset($res[0]['quantite'])) {
                return $res[0]['quantite'];
            }
        }
        return 0;
    }
        public function getReceptionNonAchemine($dateDebut, $dateFin) {
        $db = Doctrine_Manager::getInstance()->connection();

        //Recupere le nombre d'arrivage receptionner non achemine
        /* $query = $db->prepare("SELECT count(DISTINCT a.ref_produit) as quantite"
          . " FROM wrk_arrivage_produit a"
          . " WHERE a.created_at >='$dateDebut'"
          . " AND a.created_at <='$dateFin'"
          . " AND a.br_sap IS NULL"
          . " AND a.ref_produit IN ("
          . " SELECT ref_produit FROM wrk_arrivage_produit"
          . " WHERE br_sap IN(select ref_produit "
          . " FROM wrk_mouvement m "
          . " WHERE m.type = 'depose' "
          . " AND m.code_emplacement='" . RefEmplacement::CODE_EMPLACEMENT_RECEPTION . "' "
          . " AND m.heure_prise >= ALL( "
          . " SELECT m2.heure_prise "
          . " FROM wrk_mouvement m2 "
          . " WHERE m2.ref_produit=m.ref_produit "
          . " AND type='depose' "
          . " AND code_emplacement<>'" . RefEmplacement::CODE_EMPLACEMENT_RECEPTION . "')))"); */

        //Recupere le nombre de reception non achemine
        $query = $db->prepare("SELECT DISTINCT reception.ref_produit , reception.*, arrivage.created_at as dtearrivage"
                . " FROM wrk_mouvement reception"
                . " LEFT JOIN wrk_mouvement depose ON depose.ref_produit=reception.ref_produit AND depose.type='depose' AND depose.code_emplacement<>'" . RefEmplacement::CODE_EMPLACEMENT_RECEPTION . "' AND depose.heure_prise>=reception.heure_prise "
                 ."  LEFT JOIN wrk_arrivage_produit t ON t.br_sap=reception.ref_produit "
                  ."  LEFT JOIN wrk_arrivage arrivage ON arrivage.id_arrivage=t.id_arrivage "
                . " WHERE reception.heure_prise >='$dateDebut'"
                . " AND reception.heure_prise <='$dateFin'"
                . " AND reception.type = 'depose'"
                . " AND reception.code_emplacement='" . RefEmplacement::CODE_EMPLACEMENT_RECEPTION . "'"
                . " AND depose.ref_produit IS NULL");
        $st = $db->execute($query->getQuery());

        $res = $st->fetchAll();

        return $res;
    }

    public function getProduitEnRetardAvecHoraireEtArrivage($dateDebut, $dateFin) {
        $db = Doctrine_Manager::getInstance()->connection();
        //recuperer tout les produits en retard en s'assurant que la ref produit soit 
        //unique (cas ou une reception a plusieurs arrivage), 
        //si la ref produit n'est pas unique, on recupere le produit le plus en retard
        $result = $db->execute("SELECT m.id_mouvement,m.ref_produit,m.heure_prise,MAX(m.secondes) as secondes "
                . "FROM v_mouvement_retard m "
                . " WHERE m.heure_prise >='$dateDebut'"
                . " AND m.heure_prise <='$dateFin'"
                . " AND m.type = 'depose' "
                . "AND m.code_emplacement='" . RefEmplacement::CODE_EMPLACEMENT_RECEPTION . "' "
                . "AND m.heure_prise >= ALL("
                . "SELECT m2.heure_prise "
                . "FROM wrk_mouvement m2 "
                . "WHERE m2.ref_produit=m.ref_produit "
                . "AND type='depose' "
                . "AND code_emplacement<>'" . RefEmplacement::CODE_EMPLACEMENT_RECEPTION . "') "
                . "GROUP BY m.id_mouvement , m.ref_produit , m.heure_prise");

        $produitRetardArray = $result->fetchAll();
        return $this->generateArrayRetardAvecHoraire($produitRetardArray);
    }
    
           public function getArrivageEnRetard($dateDebut, $dateFin, $limit=0) {
        $RETARD_ARRIVAGE=10800;
        $db = Doctrine_Manager::getInstance()->connection();
        $query = $db->prepare("SELECT DISTINCT a.ref_produit, a.created_at as heure_prise,timestampdiff(SECOND,a.created_at,now())-$RETARD_ARRIVAGE AS `secondes`"
                . " FROM wrk_arrivage_produit a"
                . " WHERE a.created_at >='$dateDebut'"
                . " AND a.created_at <='$dateFin'"
                . " AND a.br_sap IS NULL"
                . " AND a.ref_produit NOT IN (SELECT t.ref_produit FROM wrk_arrivage_produit t WHERE t.br_sap IS NOT NULL)");
        $st = $db->execute($query->getQuery());

        $res = $st->fetchAll();
        $res= $this->generateArrayRetardAvecHoraire($res,$limit);
        
        return $res;
        
    }
    
    
      public function getDeposeEmplacementDelais($heureDebut = '', $emplacement = '',$limit=0){

        $db = Doctrine_Manager::getInstance()->connection();

        $result = $db->execute("SELECT DISTINCT m.ref_produit, m.heure_prise as heure_prise ,timestampdiff(SECOND,m.heure_prise,now()) AS `secondes` FROM wrk_mouvement m 
                 WHERE m.code_emplacement = '$emplacement' AND m.type='depose' AND m.heure_prise >= (SELECT MAX(m2.heure_prise) FROM wrk_mouvement m2 WHERE m2.ref_produit=m.ref_produit) 
                 AND m.heure_prise >= '$heureDebut'");

        $res = $result->fetchAll();
  $res= $this->generateArrayRetardAvecHoraire($res,$limit);
        return $res;
    }
            public function getProduitEnRetardPremiereDAvecHoraireEtArrivage($dateDebut, $dateFin, $limit=0) {
        $db = Doctrine_Manager::getInstance()->connection();
  $RETARD_PREMIERE_DEPOSE=14400;
   $emplacementReception = RefEmplacement::CODE_EMPLACEMENT_RECEPTION ;
        //recuperer tout les produits en retard en s'assurant que la ref produit soit 
        //unique (cas ou une reception a plusieurs arrivage), 
        //si la ref produit n'est pas unique, on recupere le produit le plus en retard
        $query="SELECT m.id_mouvement,m.ref_produit,m.heure_prise, arrivage.created_at as dtearrivage,
(SELECT COUNT(*) FROM wrk_mouvement m2 WHERE m2.ref_produit=m.ref_produit AND m2.heure_prise >=m.heure_prise AND type='depose' AND code_emplacement NOT LIKE 'Attente%' ) as nbDepose ,

	timestampdiff(SECOND,CASE WHEN arrivage.created_at THEN arrivage.created_at WHEN arrivage.created_at IS NULL THEN m.heure_prise END,now())-$RETARD_PREMIERE_DEPOSE AS secondes 
	FROM wrk_mouvement m 
    LEFT JOIN wrk_arrivage_produit t ON t.br_sap=m.ref_produit 
    LEFT JOIN wrk_arrivage arrivage ON arrivage.id_arrivage=t.id_arrivage 
                 WHERE m.heure_prise >='$dateDebut'
                 AND m.heure_prise <='$dateFin'
                 AND m.type = 'depose' 
                AND m.code_emplacement='$emplacementReception' 
                 AND (SELECT CASE WHEN type='depose' THEN code_emplacement WHEN type<>'depose' THEN '' END FROM wrk_mouvement WHERE m.ref_produit=ref_produit AND heure_prise >='$dateDebut' ORDER BY heure_prise DESC LIMIT 1) NOT LIKE 'Attente%' 
                GROUP BY m.id_mouvement , m.ref_produit , m.heure_prise HAVING nbDepose <2";
        $result = $db->execute($query);

        $produitRetardArray = $result->fetchAll();
        
        $attenteAvantRece = $this->getAttenteAvantReception($dateDebut, $dateFin);
         $attenteApresRece = $this->getAttenteApresReception($dateDebut, $dateFin);
        
        $horaires = RefHoraireTable::getInstance()->getHorairesArray();
        $feries = RefFerieTable::getInstance()->getFeriesArrayUnique();
        $nbHeureParJour = RefHoraireTable::getInstance()->getNbSecondeNonTravailleParJours($horaires);
  
            foreach ($attenteAvantRece as $key => $attente) {
            $secondeNonTravailler = RefHoraireTable::getInstance()->getNbSecondeNonTravaille($attente['dateDepose'], $attente['datePrise'], $horaires, $feries, $nbHeureParJour, $attente['seconde']);
            $res=$attente["seconde"]-$secondeNonTravailler;
            if($res>0){
            $attenteAvantRece[$key]["secondesHoraire"]=$res;
            }else
            {
                $attenteAvantRece[$key]["secondesHoraire"]=0;
            }
          }
  foreach ($attenteApresRece as $key => $attente) {
            $secondeNonTravailler = RefHoraireTable::getInstance()->getNbSecondeNonTravaille($attente['dateDepose'], $attente['datePrise'], $horaires, $feries, $nbHeureParJour, $attente['seconde']);
                $res=$attente["seconde"]-$secondeNonTravailler;
            if($res>0){
            $attenteApresRece[$key]["secondesHoraire"]=$res;
            }else{
                  $attenteApresRece[$key]["secondesHoraire"]=0;
            }
 
      
          }
       
        
            foreach ($produitRetardArray as $key => $produitRetard) {
       
                foreach ($attenteAvantRece as $attente) {
                    if($attente["ref_produit"] == $produitRetard["ref_produit"]){
                         $produitRetardArray[$key]["secondes"]= $produitRetardArray[$key]["secondes"]-$attente["secondesHoraire"];
                    }
                   
                }
                foreach ($attenteApresRece as $attente) {
                     if($attente["ref_produit"] == $produitRetard["ref_produit"]){
                         $produitRetardArray[$key]["secondes"]= $produitRetardArray[$key]["secondes"]-$attente["secondesHoraire"];
                    }
                    
                }
            
         }
         
        return $this->generateArrayRetardAvecHorairePourArrivage($produitRetardArray,$limit);
    }
        public function getProduitEnRetardDeuxiemeDAvecHoraireEtArrivage($dateDebut, $dateFin, $limit=0) {
        $db = Doctrine_Manager::getInstance()->connection();
  $RETARD_DEUXIEME_DEPOSE=19800;
  $emplacementReception = RefEmplacement::CODE_EMPLACEMENT_RECEPTION ;
        //recuperer tout les produits en retard en s'assurant que la ref produit soit 
        //unique (cas ou une reception a plusieurs arrivage), 
        //si la ref produit n'est pas unique, on recupere le produit le plus en retard
  $query="SELECT m.id_mouvement,m.ref_produit,m.heure_prise, arrivage.created_at as dtearrivage,
(SELECT COUNT(*) FROM wrk_mouvement m2 WHERE m2.ref_produit=m.ref_produit AND m2.heure_prise >=m.heure_prise AND type='depose' AND code_emplacement NOT LIKE 'Attente%' ) as nbDepose ,
	timestampdiff(SECOND,CASE WHEN arrivage.created_at THEN arrivage.created_at WHEN arrivage.created_at IS NULL THEN m.heure_prise END,now())-$RETARD_DEUXIEME_DEPOSE AS secondes 
	FROM wrk_mouvement m 
    LEFT JOIN wrk_arrivage_produit t ON t.br_sap=m.ref_produit 
    LEFT JOIN wrk_arrivage arrivage ON arrivage.id_arrivage=t.id_arrivage 
                 WHERE m.heure_prise >='$dateDebut'
                 AND m.heure_prise <='$dateFin'
                 AND m.type = 'depose' 
                AND m.code_emplacement='$emplacementReception' 
                 AND (SELECT CASE WHEN type='depose' THEN code_emplacement WHEN type<>'depose' THEN '' END FROM wrk_mouvement WHERE m.ref_produit=ref_produit AND heure_prise >='$dateDebut' ORDER BY heure_prise DESC LIMIT 1) NOT LIKE 'Attente%' 
                GROUP BY m.id_mouvement , m.ref_produit , m.heure_prise HAVING nbDepose >=1 AND nbDepose <3";
        $result = $db->execute($query);

        $produitRetardArray = $result->fetchAll();

               $attenteAvantRece = $this->getAttenteAvantReception($dateDebut, $dateFin);
         $attenteApresRece = $this->getAttenteApresReception($dateDebut, $dateFin);
        
        $horaires = RefHoraireTable::getInstance()->getHorairesArray();
        $feries = RefFerieTable::getInstance()->getFeriesArrayUnique();
        $nbHeureParJour = RefHoraireTable::getInstance()->getNbSecondeNonTravailleParJours($horaires);
  
               foreach ($attenteAvantRece as $key => $attente) {
            $secondeNonTravailler = RefHoraireTable::getInstance()->getNbSecondeNonTravaille($attente['dateDepose'], $attente['datePrise'], $horaires, $feries, $nbHeureParJour, $attente['seconde']);
            $res=$attente["seconde"]-$secondeNonTravailler;
            if($res>0){
            $attenteAvantRece[$key]["secondesHoraire"]=$res;
            }else
            {
                $attenteAvantRece[$key]["secondesHoraire"]=0;
            }
          }
  foreach ($attenteApresRece as $key => $attente) {
            $secondeNonTravailler = RefHoraireTable::getInstance()->getNbSecondeNonTravaille($attente['dateDepose'], $attente['datePrise'], $horaires, $feries, $nbHeureParJour, $attente['seconde']);
                $res=$attente["seconde"]-$secondeNonTravailler;
            if($res>0){
            $attenteApresRece[$key]["secondesHoraire"]=$res;
            }else{
                  $attenteApresRece[$key]["secondesHoraire"]=0;
            }
 
      
          }
       
        
            foreach ($produitRetardArray as $key => $produitRetard) {
       
                foreach ($attenteAvantRece as $attente) {
                   
                    if($attente["ref_produit"] == $produitRetard["ref_produit"]){
                   
                         $produitRetardArray[$key]["secondes"]= $produitRetardArray[$key]["secondes"]-$attente["secondesHoraire"];
                        
                    }
                   
                   
                }
                foreach ($attenteApresRece as $attente) {
                     
                     if($attente["ref_produit"] == $produitRetard["ref_produit"]){
                         
                         $produitRetardArray[$key]["secondes"]= $produitRetardArray[$key]["secondes"]-$attente["secondesHoraire"];
                        
                    }
                    
                }
            
         }
        return $this->generateArrayRetardAvecHorairePourArrivage($produitRetardArray,$limit);
    }

    public function getAttenteApresReception($dateDebut, $dateFin){
         $db = Doctrine_Manager::getInstance()->connection();
          $emplacementReception = RefEmplacement::CODE_EMPLACEMENT_RECEPTION ;
      $query=  "SELECT t.ref_produit as numArrivage,depose.ref_produit,arrivage.created_at as dateArrivage,rec.heure_prise as dateRec, depose.code_emplacement as empDepose,prise.code_emplacement as empPrise,depose.heure_prise as dateDepose , CASE WHEN prise.heure_prise THEN prise.heure_prise WHEN prise.heure_prise IS NULL THEN NOW() END as datePrise , timestampdiff(SECOND, depose.heure_prise ,CASE WHEN prise.heure_prise THEN prise.heure_prise WHEN prise.heure_prise IS NULL THEN NOW() END) as seconde, MIN(prise.heure_prise)
                FROM  wrk_mouvement as rec
                LEFT JOIN wrk_arrivage_produit t ON t.br_sap=rec.ref_produit 
                LEFT JOIN wrk_arrivage arrivage ON arrivage.id_arrivage=t.id_arrivage 
                LEFT JOIN wrk_mouvement as depose ON depose.ref_produit=rec.ref_produit
                LEFT JOIN wrk_mouvement as prise ON depose.ref_produit=prise.ref_produit AND prise.heure_prise>depose.heure_prise

                WHERE depose.type='depose'
                AND rec.type = 'depose' 
                AND depose.code_emplacement LIKE '%Attente%' 
                AND rec.code_emplacement='$emplacementReception'
                AND rec.heure_prise >='$dateDebut' 
                AND rec.heure_prise <='$dateFin' 
                AND depose.code_emplacement<>'$emplacementReception'
                AND depose.heure_prise > rec.heure_prise
                AND (prise.id_mouvement IS NULL OR prise.heure_prise > rec.heure_prise)
               GROUP BY rec.id_mouvement ";
      
       $result = $db->execute($query);

      return $result->fetchAll();
    }
    
        public function getAttenteAvantReception($dateDebut, $dateFin){
             $db = Doctrine_Manager::getInstance()->connection();
          $emplacementReception = RefEmplacement::CODE_EMPLACEMENT_RECEPTION ;
      $query=  "SELECT t.ref_produit as numArrivage,t.br_sap as ref_produit,arrivage.created_at as dateArrivage,rec.heure_prise as dateRec, depose.code_emplacement as empDepose,prise.code_emplacement as empPrise,prise.type as actionPrise,depose.heure_prise as dateDepose , CASE WHEN prise.heure_prise THEN prise.heure_prise WHEN prise.heure_prise IS NULL THEN rec.heure_prise END as datePrise , timestampdiff(SECOND, depose.heure_prise ,CASE WHEN prise.heure_prise THEN prise.heure_prise WHEN prise.heure_prise IS NULL THEN rec.heure_prise END) as seconde, MIN(prise.heure_prise)
                FROM  wrk_mouvement as rec
                LEFT JOIN wrk_arrivage_produit t ON t.br_sap=rec.ref_produit 
                LEFT JOIN wrk_arrivage arrivage ON arrivage.id_arrivage=t.id_arrivage 
                LEFT JOIN wrk_mouvement as depose ON depose.ref_produit=t.ref_produit
                LEFT JOIN wrk_mouvement as prise ON depose.ref_produit=prise.ref_produit AND prise.heure_prise>depose.heure_prise

                WHERE depose.type='depose'
                AND rec.type = 'depose' 
                AND depose.code_emplacement LIKE '%Attente%' 
                AND rec.code_emplacement='$emplacementReception'
                AND rec.heure_prise >='$dateDebut' 
                AND rec.heure_prise <='$dateFin' 
                AND depose.code_emplacement<>'$emplacementReception'
                AND depose.heure_prise < rec.heure_prise
                AND (prise.id_mouvement IS NULL OR prise.heure_prise < rec.heure_prise)
                GROUP BY rec.id_mouvement ";
      
       $result = $db->execute($query);

      return $result->fetchAll();
    }
    public function getDelaisReceptionUniteTracking($dateDebut, $dateFin) {
        $db = Doctrine_Manager::getInstance()->connection();

        $result = $db->execute("SELECT reception.ref_produit as unite, arrivage.created_at as date_arrivage,reception.heure_prise as date_reception,MIN(depose.heure_prise) as date_depose,timestampdiff(SECOND,reception.heure_prise,depose.heure_prise) AS delais_acheminement, timestampdiff(SECOND,addtime(reception.heure_prise,nature.delais),depose.heure_prise) AS retard_depose , timestampdiff(SECOND,addtime(reception.heure_prise,nature.delais),now()) AS retard_sans_depose 
            FROM wrk_mouvement reception
            LEFT JOIN wrk_arrivage_produit receptionA ON receptionA.br_sap=reception.ref_produit 
            LEFT JOIN wrk_arrivage_produit arrivage ON arrivage.ref_produit=receptionA.ref_produit AND receptionA.ref_produit<>'Absent'
            LEFT JOIN wrk_mouvement depose ON depose.ref_produit=reception.ref_produit AND depose.type='depose' AND depose.code_emplacement<>'Réception' AND depose.heure_prise>=reception.heure_prise 
            LEFT JOIN ref_nature nature ON nature.id_nature=receptionA.id_nature
            WHERE reception.heure_prise >='$dateDebut'
            AND reception.heure_prise <='$dateFin'
            AND arrivage.br_sap IS NULL
            AND reception.type = 'depose' 
            AND reception.code_emplacement='Réception'  
            GROUP BY reception.ref_produit , arrivage.created_at , reception.heure_prise
            ORDER BY reception.heure_prise DESC");

        $res = $result->fetchAll();
        return $this->generateDelaisReceptionUniteTrackingAvecHoraire($res);
        // return $res;
    }

    private function generateDelaisReceptionUniteTrackingAvecHoraire($produitRetardArray, $limitSecondsRetard = 0) {
        $horaires = RefHoraireTable::getInstance()->getHorairesArray();
        $feries = RefFerieTable::getInstance()->getFeriesArrayUnique();
        $nbHeureParJour = RefHoraireTable::getInstance()->getNbSecondeNonTravailleParJours($horaires);
        $produitRetardHoraireArray = array();
        foreach ($produitRetardArray as $produitRetard) {
            $secondeNonTravailler = RefHoraireTable::getInstance()->getNbSecondeNonTravaille($produitRetard['date_reception'], $produitRetard['date_depose'], $horaires, $feries, $nbHeureParJour, $produitRetard['retard_depose'] - $limitSecondsRetard);
            $retardDepose = $produitRetard['retard_depose'] - $secondeNonTravailler;

            $secondeNonTravailler = RefHoraireTable::getInstance()->getNbSecondeNonTravaille($produitRetard['date_reception'], date('Y-m-d H:i:s'), $horaires, $feries, $nbHeureParJour, $produitRetard['retard_sans_depose'] - $limitSecondsRetard);
            $retardSansDepose = $produitRetard['retard_sans_depose'] - $secondeNonTravailler;

            $secondeNonTravailler = RefHoraireTable::getInstance()->getNbSecondeNonTravaille($produitRetard['date_reception'], $produitRetard['date_depose'], $horaires, $feries, $nbHeureParJour, $produitRetard['delais_acheminement'] - $limitSecondsRetard);
            $delaisAcheminent = $produitRetard['delais_acheminement'] - $secondeNonTravailler;

            if ($retardDepose > $limitSecondsRetard) {
                $produitRetard['retard_depose'] = $retardDepose;
                if ($retardDepose < 0) {
                    $produitRetard['time_retard_depose'] = '-' . $this->secondsToTime(-$retardDepose);
                } else {
                    $produitRetard['time_retard_depose'] = $this->secondsToTime($retardDepose);
                }
            } else {
                $produitRetard['time_retard_depose'] = '00:00:00';
            }
            if ($retardSansDepose > $limitSecondsRetard) {
                $produitRetard['retard_sans_depose'] = $retardSansDepose;
                if ($retardSansDepose < 0) {
                    $produitRetard['time_retard_sans_depose'] = '-' . $this->secondsToTime(-$retardSansDepose);
                } else {
                    $produitRetard['time_retard_sans_depose'] = $this->secondsToTime($retardSansDepose);
                }
            } else {
                $produitRetard['time_retard_sans_depose'] = '00:00:00';
            }

            $produitRetard['time_delais_acheminement'] = $this->secondsToTime($produitRetard['delais_acheminement']);

            if ($delaisAcheminent > $limitSecondsRetard) {
                $produitRetard['delais_acheminement'] = $delaisAcheminent;
                if ($delaisAcheminent < 0) {
                    $produitRetard['time_delais_acheminement_horaire'] = '-' . $this->secondsToTime(-$delaisAcheminent);
                } else {
                    $produitRetard['time_delais_acheminement_horaire'] = $this->secondsToTime($delaisAcheminent);
                }
            } else {
                $produitRetard['time_delais_acheminement_horaire'] = '00:00:00';
            }

            $produitRetardHoraireArray[] = $produitRetard;
        }

        return $produitRetardHoraireArray;
    }

    private function getArrayStatsMonth($dateDebut, $dateFin) {
        $monthDebut = intval(date("m", strtotime($dateDebut)));
        $monthFin = intval(date("m", strtotime($dateFin)));
        $res = array();
        if ($monthDebut <= $monthFin) {
            for ($i = $monthDebut; $i <= $monthFin; $i++) {
                $res[$i] = array();
            }
        }
        return $res;
    }

    private function getArrayStatsMonthGlissant($dateDebut) {
        $monthDebut = intval(date("m", strtotime($dateDebut)));
        $res = array();
        $nb = 0;
        while ($nb < 12) {
            $res[$monthDebut] = array('name' => $this->getMonthName($monthDebut), 'ordre' => $nb + 1);
            $monthDebut++;
            if ($monthDebut > 12) {
                $monthDebut = 1;
            }
            $nb++;
        }
        return $res;
    }
    
       private function getArrayStatsJoursGlissant($dateDebut) {
       
        $res = array();
        $nb = 0;
        while ($nb < 10) {
            $dayDebut = date("d", strtotime($dateDebut));
            $res[intval($dayDebut)] = array('name' => $dayDebut."/".date("m", strtotime($dateDebut)), 'ordre' => $nb + 1);
            $nb++;
            $dateDebut=date('Y-m-d', strtotime($dateDebut. ' + 1 days'));
        }
        return $res;
    }
    

    private function getMonthName($month) {
        switch ($month) {
            case 1:
                return 'janv.';
            case 2:
                return 'févr.';
            case 3:
                return 'mars';
            case 4:
                return 'avr.';
            case 5:
                return 'mai';
            case 6:
                return 'juin';
            case 7:
                return 'juill.';
            case 8:
                return 'août';
            case 9:
                return 'sept.';
            case 10:
                return 'oct.';
            case 11:
                return 'nov.';
            case 12:
                return 'déc.';
        }
        return '';
    }

    public function getNbProduitEnRetard() {
        return count($this->getProduitEnRetard());
    }

    public function arrayToCollection($mouvementsArray) {
        $mouvements = new Doctrine_Collection('WrkMouvement');
        foreach ($mouvementsArray as $value) {
            $mouvement = new WrkMouvement();
            $mouvement->setIdMouvement($value['id_mouvement']);
            $mouvement->setHeurePrise($value['heure_prise']);
            $mouvement->setType($value['type']);
            $mouvement->setCodeEmplacement($value['code_emplacement']);
            $mouvement->setRefProduit($value['ref_produit']);
            $mouvement->setGroupe($value['groupe']);
            $mouvements->add($mouvement);
        }
        return $mouvements;
    }

    public function getWrkMouvementReception(WrkArrivageProduit $reception) {
        return $this->createQuery()->select('m.*')
                        ->from('WrkMouvement m')
                        ->where('m.ref_produit = ?', $reception->getBrSap())
                        ->andWhere('m.code_emplacement = ?', RefEmplacement::CODE_EMPLACEMENT_RECEPTION)
                        ->andWhere('m.type=?', 'depose')
                        ->fetchOne();
    }

    public function getDelaisPriseDepose($dateDebut, $dateFin) {
        $db = Doctrine_Manager::getInstance()->connection();

        $result = $db->execute("SELECT prise.* , prise.heure_prise as date_prise,MIN(depose.heure_prise) as date_depose,depose.id_mouvement as idDepose,depose.ref_produit as ref_produit_depose,depose.id_utilisateur as id_utilisateur_depose,depose.code_emplacement as code_emplacement_depose,depose.groupe as groupe_depose,depose.commentaire as commentaire_depose, depose.heure_prise as date_depose ,timestampdiff(SECOND,prise.heure_prise,depose.heure_prise) AS delais_transport
            FROM wrk_mouvement prise
            LEFT JOIN wrk_mouvement depose ON depose.ref_produit=prise.ref_produit AND depose.type='depose' AND depose.heure_prise>=prise.heure_prise 
            WHERE prise.heure_prise >='$dateDebut'
            AND prise.heure_prise <='$dateFin'
            AND prise.type = 'prise' 
            GROUP BY prise.ref_produit , prise.heure_prise
            ORDER BY prise.heure_prise DESC");


        $res = $result->fetchAll();


        $arrayAvecHoraire = $this->generateDelaisPriseDeposeAvecHoraire($res);

        $arrayAvecHoraireEtDepose = $this->addDeposeSansPrise($arrayAvecHoraire, $dateDebut, $dateFin);
        return $arrayAvecHoraireEtDepose;
    }

    private function addDeposeSansPrise($prisesAvecDepose, $dateDebut, $dateFin) {
        $db = Doctrine_Manager::getInstance()->connection();
        $arrayIdDepose = array();
        foreach ($prisesAvecDepose as $priseDepose) {
            if ($priseDepose['idDepose'] != "")
                $arrayIdDepose[] = $priseDepose['idDepose'];
        }

        $resultQuery = $db->execute("SELECT ref_produit, depose.id_mouvement as idDepose,depose.ref_produit as ref_produit_depose,depose.id_utilisateur as id_utilisateur_depose,depose.code_emplacement as code_emplacement_depose,depose.groupe as groupe_depose,depose.commentaire as commentaire_depose, depose.heure_prise as date_depose
            FROM wrk_mouvement depose
            WHERE depose.heure_prise >='$dateDebut'
            AND depose.heure_prise <='$dateFin'
            AND depose.type = 'depose' 
            AND depose.id_mouvement NOT IN (" . implode(",", $arrayIdDepose) . ")
            ORDER BY depose.heure_prise DESC");


        $res = $resultQuery->fetchAll();
        $result = array_merge($prisesAvecDepose, $res);

        function date_compare($a, $b) {
            if (isset($a['date_prise']))
                $t1 = strtotime($a['date_prise']);
            else
                $t1 = strtotime($a['date_depose']);

            if (isset($b['date_prise']))
                $t2 = strtotime($b['date_prise']);
            else
                $t2 = strtotime($b['date_depose']);

            return $t1 - $t2;
        }

        usort($result, 'date_compare');

        return $result;
    }

    private function generateDelaisPriseDeposeAvecHoraire($produitArray) {
        $horaires = RefHoraireTable::getInstance()->getHorairesArray();
        $feries = RefFerieTable::getInstance()->getFeriesArrayUnique();
        $nbHeureParJour = RefHoraireTable::getInstance()->getNbSecondeNonTravailleParJours($horaires);
        $produitHoraireArray = array();
        foreach ($produitArray as $produit) {
            $secondeNonTravailler = RefHoraireTable::getInstance()->getNbSecondeNonTravaille($produit['date_prise'], $produit['date_depose'], $horaires, $feries, $nbHeureParJour);

            $delaisTransport = $produit['delais_transport'] - $secondeNonTravailler;

            $produit['delais_transport_horaire'] = $this->secondsToTime($delaisTransport);
            $produit['delais_transport_time'] = $this->secondsToTime($produit['delais_transport']);

            $produitHoraireArray[] = $produit;
        }

        return $produitHoraireArray;
    }

    /* Liste des arrivages en retard*/
    public function getArrivageRetard($dateDebut, $dateFin){
      
        $db = Doctrine_Manager::getInstance()->connection();
        
        $result = $db->execute("SELECT num_arrivage, unite_tracking, date_reception, retard_A FROM exp_kpi_retard
            WHERE retard_A > (SELECT valeur FROM adm_supervision_parametrage WHERE nom = 'delai_retard_A')
            AND date_reception >= '$dateDebut'							
            AND date_reception <='$dateFin' ORDER BY retard_A DESC");

        $res = $result->fetchAll();
        
        return $res;
    }
    
    /* Liste des receptions en retard*/
    public function getreceptionRetard($dateDebut, $dateFin){
        
        $db = Doctrine_Manager::getInstance()->connection();

        $result = $db->execute("SELECT unite_tracking, date_depose, retard_B FROM exp_kpi_retard
            WHERE retard_B > (SELECT valeur FROM adm_supervision_parametrage WHERE nom = 'delai_retard_B')
            AND date_reception >= '$dateDebut'							
            AND date_reception <='$dateFin'");

        $res = $result->fetchAll();
        
        return $res;
    }
    
    /* Liste des deposes en retard*/
    public function getDeposeRetard($dateDebut, $dateFin){
        
        $db = Doctrine_Manager::getInstance()->connection();

        $result = $db->execute("SELECT unite_tracking, date_depose_suivante, retard_C FROM exp_kpi_retard
            WHERE retard_C > (SELECT valeur FROM adm_supervision_parametrage WHERE nom = 'delai_retard_C')
            AND date_reception >= '$dateDebut'							
            AND date_reception <='$dateFin'");

        $res = $result->fetchAll();
        
        return $res;
    }
}
